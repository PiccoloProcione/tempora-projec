"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.main=main;exports.isPatchedAll=isPatchedAll;var _filePatcher=require("./filePatcher");var _distributionInfoProvider=require("./distributionInfoProvider");function _createForOfIteratorHelper(r,e){var t;if(typeof Symbol==="undefined"||r[Symbol.iterator]==null){if(Array.isArray(r)||(t=_unsupportedIterableToArray(r))||e&&r&&typeof r.length==="number"){if(t)r=t;var a=0;var n=function e(){};return{s:n,n:function e(){if(a>=r.length)return{done:true};return{done:false,value:r[a++]}},e:function e(r){throw r},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i=true,o=false,c;return{s:function e(){t=r[Symbol.iterator]()},n:function e(){var r=t.next();i=r.done;return r},e:function e(r){o=true;c=r},f:function e(){try{if(!i&&t.return!=null)t.return()}finally{if(o)throw c}}}}function _unsupportedIterableToArray(e,r){if(!e)return;if(typeof e==="string")return _arrayLikeToArray(e,r);var t=Object.prototype.toString.call(e).slice(8,-1);if(t==="Object"&&e.constructor)t=e.constructor.name;if(t==="Map"||t==="Set")return Array.from(e);if(t==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return _arrayLikeToArray(e,r)}function _arrayLikeToArray(e,r){if(r==null||r>e.length)r=e.length;for(var t=0,a=new Array(r);t<r;t++){a[t]=e[t]}return a}var fs=require('fs');var rorPackage=JSON.parse(fs.readFileSync(__dirname+'/../../package.json',"utf8"));var kibanaPackage=JSON.parse(fs.readFileSync(__dirname+'/../../../../package.json',"utf8"));var isDevEnv=_distributionInfoProvider.DistributionInfoProvider.isEnvironmentDev();function getPatchDir(){var e=kibanaPackage.version;var r=rorPackage.ror_patch_versions;for(var t=0,a=Object.keys(r);t<a.length;t++){var n=a[t];if(r[n].includes(e)){return n}}throw new Error("unsupported version for patching "+e)}var kbnVersion=rorPackage.version;function main(){try{var e=process.argv.length>=3?process.argv[2]:'help';log("Received command: "+e);switch(e){case'unpatch':unpatchAll();break;case'verify':isPatchedAll();break;case'fix':console.log("FIXING");fixAll();break;case'patch':patchAll();break;default:help()}}catch(e){log("ReadonlyREST encountered problems with compatibility manager script, please run manually using 'ror-tools.js'  ",e)}}function log(e){var r=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;e="[ROR COMPAT] "+e;if(r){console.log(e,r)}else{console.log(e)}}function patchAll(){if(!distroRequiresPatch()){return true}log("Modify a few Kibana files for ReadonlyREST...");return doWithPatcher(function(e){if(e.hasBackup()){log("Backup file found, assuming already patched. Will first unpatch and then re-patch with potentially newer code.");e.unpatch()}e.patch();return true})}function isPatchedAll(){log("Verifying the presence of ROR hooks on Kibana files..");return doWithPatcher(function(e){if(!e.isPatched()){log("This file  was not patched");return false}return true})}function unpatchAll(){if(!distroRequiresPatch()){return true}return doWithPatcher(function(e){if(e.hasBackup()){log("Backup file found!");e.unpatch()}else{log("Backup file not found: assuming patch was not applied.")}return true})}function doWithPatcher(e){var r=isDevEnv?"/patches_for_kbn_source":"/patches_for_kbn_distribution";var t=__dirname+r+(isDevEnv?"/"+getPatchDir():"")+"/";var a=/.*\.patch/gi;var n=fs.readdirSync(t).filter(function(e){return e.match(a)});var i=_createForOfIteratorHelper(n),o;try{for(i.s();!(o=i.n()).done;){var c=o.value;c=t+c;log("Found patch file "+c);var l=".".concat(kibanaPackage.version,"_").concat(rorPackage.version,".orig");var s=new _filePatcher.FilePatcher(c,(__dirname+"/../../../../").replace("//","/"),l);if(!e(s)){return false}}}catch(e){i.e(e)}finally{i.f()}return true}function distroRequiresPatch(){return true}function fixAll(){log("Will verify and, where necessary, attempt to automatically fix patched Kibana files...");if(!distroRequiresPatch()){return true}var e=false;try{e=isPatchedAll()}catch(e){log("Compatibility verification failed: ",e)}if(!e){log("Attempting to re-patch...");try{e=patchAll()}catch(e){log("Could not fix compatibility automatically. Maybe a permissions issue? See stack trace. To fix this, use './ror-tools.js unpatch' and './ror-tools.js patch' manually",e)}}if(e){log("compatibility did no need fixing. All is patched OK.")}else{log("compatibility could not be fixed: FAILED.")}return e}function help(){log("This tool is used to (un)install some code hooks in Kibana main source code that are necessary for ReadonlyREST to work appropriately with the non-OSS Kibana distribution"+"\n\n"+"usage: node/bin/node "+process.argv[0]+" "+process.argv[1]+" <patch|unpatch|verify|fix>")}