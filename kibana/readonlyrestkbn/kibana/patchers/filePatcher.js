"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:true});exports.FilePatcher=void 0;var _classCallCheck2=_interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));var _createClass2=_interopRequireDefault(require("@babel/runtime/helpers/createClass"));var diff=require("diff");var fs=require("fs");var _require=require("path"),basename=_require.basename;var FilePatcher=function(){function l(e){var t=arguments.length>1&&arguments[1]!==undefined?arguments[1]:__dirname+"../../";var i=arguments.length>2&&arguments[2]!==undefined?arguments[2]:".orig";(0,_classCallCheck2.default)(this,l);this.patchFilePath=e;this.backup_suffix=i;this.targetPatchRoot=t;this.patchContent=fs.readFileSync(e,"utf8");var a=/--- ([^ \n\r\t]+).*/.exec(this.patchContent);var s;if(a&&a[1]){s=a[1]}else{throw Error("Unable to find source file in '"+this.patchFilePath+"'")}this.sourceFile=(this.targetPatchRoot+"/"+s).replace("//","/");var r=/\+\+\+ ([^ \n\r\t]+).*/.exec(this.patchContent);var n;if(r&&r[1]){n=r[1]}else{throw Error("Unable to find destination file in '"+e+"'")}this.destinationFile=(this.targetPatchRoot+"/"+n).replace("//","/")}(0,_createClass2.default)(l,[{key:"backup",value:function e(){var t=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.sourceFile;fs.copyFileSync(t,t+this.backup_suffix);return this}},{key:"restore",value:function e(){var t=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.sourceFile;if(!this.hasBackup(t)){throw new Error("Cannot restore "+t+" as no backup was found")}var i=t+this.backup_suffix;fs.copyFileSync(i,t);fs.unlinkSync(i);console.log("Restored "+t);return this}},{key:"hasBackup",value:function e(){var t=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.sourceFile;return fs.existsSync(t+this.backup_suffix)}},{key:"unpatch",value:function e(){var t=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.sourceFile;return this.restore(t)}},{key:"isPatched",value:function e(){console.log("Verifying patched state...");if(!this.hasBackup()){console.log("NO_BACKUP cannot verify patched status of "+this.sourceFile+", backup file not present.");return false}var t=fs.readFileSync(this.sourceFile+this.backup_suffix,"utf8").toString("utf-8");var i=fs.readFileSync(this.sourceFile,"utf8").toString("utf-8");var a=diff.applyPatch(t,this.patchContent,{fuzzFactor:2});if(a===false){throw new Error("Cannot verify patched status, as the patch is not applicable to the original backed-up file")}var s=i==a;if(s){console.log(basename(this.sourceFile)+" patched state: VERIFIED.")}else{console.log(basename(this.sourceFile)+" patched state is OUTDATED: it and needs to be reverted and patched again.")}return s}},{key:"patch",value:function e(){if(this.hasBackup()){console.log("Backup file was present: '"+this.sourceFile+this.backup_suffix+"'.  Already patched?");return false}this.backup();var t=fs.readFileSync(this.sourceFile,"utf8").toString("utf-8");var i=diff.applyPatch(t,this.patchContent,{fuzzFactor:2});if(i===false){throw Error("Failed to apply patch '"+basename(this.patchFilePath)+"' to '"+this.sourceFile+"'")}else if(this.sourceFile!==this.destinationFile){console.log("Applied '"+basename(this.patchFilePath)+"' to '"+this.sourceFile+"' and stored it as '"+this.destinationFile+"'")}else{console.log("Applied '"+basename(this.patchFilePath)+"' to '"+this.sourceFile+"'")}fs.writeFileSync(this.destinationFile,i);return this}}]);return l}();exports.FilePatcher=FilePatcher;