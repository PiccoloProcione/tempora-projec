"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:true});exports.ServerCreator=void 0;var _classCallCheck2=_interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));var _createClass2=_interopRequireDefault(require("@babel/runtime/helpers/createClass"));var _https=_interopRequireDefault(require("https"));var _fs=_interopRequireDefault(require("fs"));var _rorLoggerFactory=require("../core/logging/rorLoggerFactory");var _lodash=_interopRequireDefault(require("lodash"));var _crypto=require("crypto");var ServerCreator=function(){function r(e){(0,_classCallCheck2.default)(this,r);this.sslConfig=e;this.logger=_rorLoggerFactory.RorLoggerFactory.getLoggerForFile(__filename);this.secureOptionsBitmask=_crypto.constants.SSL_OP_NO_TLSv1|_crypto.constants.SSL_OP_NO_SSLv2|_crypto.constants.SSL_OP_NO_SSLv3;if(e){this.initializeSupportedProtocols(e)}}(0,_createClass2.default)(r,[{key:"createServer",value:function e(r,t){r.disable('x-powered-by');if(!this.sslConfig){return r.listen(t.port,t.host)}r.set('trust proxy','127.0.0.1');return this.createHttpsServer(r,t.host,t.port)}},{key:"initializeSupportedProtocols",value:function e(r){var t=_crypto.constants.SSL_OP_NO_TLSv1_1,s=_crypto.constants.SSL_OP_NO_TLSv1_2,o=_crypto.constants.SSL_OP_NO_TLSv1_3;var i=["TLSv1.1","TLSv1.2","TLSv1.3"];if(!r.supportedProtocols){this.logger.info("ROR PKP SSL server will accept protocols: "+i+" (bitmask: "+this.secureOptionsBitmask+")");return}if(r.supportedProtocols.length===0){throw new Error("server.ssl.secureProtocols should be a non empty array or undefined")}var a=r.supportedProtocols.filter(function(e){return!i.includes(e)});if(a.length>0){throw new Error("Unrecognised supportedProtocol values: ".concat(a,", available values are: ").concat(i))}if(!r.supportedProtocols.includes("TLSv1.1")){this.logger.debug("Disallow TLSv1.1");this.secureOptionsBitmask|=t}if(!r.supportedProtocols.includes("TLSv1.2")){this.logger.debug("Disallow TLSv1.2");this.secureOptionsBitmask|=s}if(!r.supportedProtocols.includes("TLSv1.3")){this.logger.debug("Disallow TLSv1.3");this.secureOptionsBitmask|=o}this.logger.info("ROR PKP SSL server will accept protocols: "+r.supportedProtocols+" (bitmask: "+this.secureOptionsBitmask+")")}},{key:"createHttpsServer",value:function e(r,t,s){var o,i;var a={secureOptions:this.secureOptionsBitmask,ciphers:(o=this.sslConfig.cipherSuites)===null||o===void 0?void 0:o.join(":"),honorCipherOrder:true};var l=this.isSslConfiguredWithKeystore()?{pfx:_fs.default.readFileSync(this.sslConfig.keystorePath),passphrase:this.sslConfig.keystorePassword}:{key:_fs.default.readFileSync(this.sslConfig.keyPath),passphrase:this.sslConfig.keyPassphrase,cert:_fs.default.readFileSync(this.sslConfig.certificatePath)};Object.assign(a,l);if(((i=this.sslConfig.cipherSuites)===null||i===void 0?void 0:i.length)>0){a.ciphers=this.sslConfig.cipherSuites.join(":")}var n=this.sslConfig.certificateAuthorities;if(!_lodash.default.isEmpty(n)){a.ca=n}var c;try{this.logger.debug("Creating TLS server on https://".concat(t,":").concat(s," with options: "),a);c=_https.default.createServer(a,r).listen(s,t)}catch(e){if(e.message.includes("mac verify failure")){this.logger.error("The keystore password provided in kibana.yml does not match the password the PKCS#12 file is encrypted with. Please provide a valid password");process.exit(1)}else{this.logger.error("Error creating https server: ",e);console.error(e);process.exit(1)}}return c}},{key:"isSslConfiguredWithKeystore",value:function e(){return this.sslConfig.keystorePath!==undefined}}]);return r}();exports.ServerCreator=ServerCreator;